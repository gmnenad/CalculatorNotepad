clen(97)
longest (1000000)
longest2(1000000)
longest3(1000000)



//#C#
int clen(long n){
    int c=1;
    while (n>1){
        c++;
        if ((n&1)==0) 
            n/=2;
        else
            n=n*3+1;
    }
    return c;
}

int[] longest(int N){
    int mL=0,mN=1;
    for (int i=2; i<=N; i++){
        int L=clen(i);
        if (L>mL){
            mL=L;
            mN=i;
        }
    }
    return new int[]{mL, mN};
}

long[] longest2(int N){
    int maxN=10*N;
    var L=new int[maxN];
    L[1]=1;
    int mL=0,mN=1;
    long bgN=0;
    for (int i=2; i<=N; i++){
        // find length of chain for i
        long n=i;
        int c=0;
        while (n>1){
            if (n>bgN) bgN=n;
            if ((n<maxN)&&(L[n]>0)){
                c+=L[n];
                n=0;
            }else{
                c++;
                if ((n&1)==0) 
                    n/=2;
                else
                    n=n*3+1;
            }
        }
        if (n<0) return new long[]{-1111,n,bgN};
        // update 
        L[i]=c;
        if (c>mL){
            mL=c;
            mN=i;
        }
    }
    return new long[]{mL+1, mN, bgN};
}

int clen3(int n, ref int[] L){
    int nxt= (n&1)==0? n/2 : n*3+1;
    if (n<L.Length){
        if (L[n]>0) return L[n];
        int res=1+clen3(nxt,ref L);
        L[n]=res;
        return res;
    }else
        return 1+clen3(nxt, ref L);
}


int[] longest3(int N){
    var L=new int[N*3];
    L[1]=1;
    int mL=0,mN=1;
    for (int i=2; i<=N; i++){
        int c= clen3(i, ref L);
        if (c>mL){
            mL=c;
            mN=i;
        }
    }
    return new int[]{mL, mN};
}



