
csSim(1) // my method, for a=0.950216 , win ~ 52.5%
csSim(2) // Thoks method, for pw=45%  , win ~ 58.9%






//#C#
int N,M;
int N1,A1;
double pw2;
List<int> L;

void prepare(int n, int m){
    N=n;
    M=m;
    A1=(int)(0.950216*M); // a=0.950216 is valid for N==30 ! win~ 52.5%
    pw2=0.45; // pw=45% for N=30 for alg 2 .. estimate ! win~ 58.9% 
    N1=(int)(0.10*N); // test 10% of numbers to estimate max
    L= new List<int>(N);
    // generate random numbers
    Random rnd=new Random();
    int i=0;
    while(i<N){
        int r= (int)(rnd.NextDouble()*M);
        if (!L.Contains(r)){
            L.Add(r);
            i++;
        }
    }
}

// my version, select if X>=A
bool tryOne1(){
    int selected=-1, max=-1;
    for (int i=0; i<N; i++){
        int r= L[i];
        if ((selected<0)&&(r>=A1)) selected=r;
        if (r>max) max=r;
    }
    return (selected==max); 
}

// Thoks version, select if (X/M)^k >= pw  && X>= current max
bool tryOne2(){
    int selected=-1, max=-1;
    for (int i=0; i<N; i++){
        int X= L[i];
        if (selected<0){
            int k=N-1-i; // remaining unopened boxes
            if ( (k<=0)||((X>=max)&&(Math.Pow(X/(double)M,k)>=pw2)) ) selected=X;
        }
        if (X>max) max=X;
    }
    return (selected==max); 
}


// Unknown Max version
bool tryOne3(){
    int max=N-1;
    // check first N1 values, to estimate max
    for (int i=0; i<N1; i++){
        int X= L[i];
        if (X>max) max=X;
    }
    int ME= (int)(max*1.18); // estimate max value M
    // Thoks version, select if (X/M)^k >= pw  && X>= current max 
    int selected=-1;
    for (int i=N1; i<N; i++){
        int X= L[i];
        if (selected<0){
            int k=N-1-i; // remaining unopened boxes
            if ( (k<=0)||((X>=max)&&(Math.Pow(X/(double)M,k)>=pw2)) ) selected=X;
        }
        if (X>max) max=X;
    }
    return (selected==max); 
}


// try selected algorithm
bool tryAlg(int alg){
    switch(alg){
        case 1: return tryOne1();
        case 2: return tryOne2();
        case 3: return tryOne3();
    }
    return false;
}

double csSim(int alg=1, int nSim=100000, int N=30,int M=1000000){
    prepare(N,M);
    int ok=0;
    for(int i=0; i<nSim; i++)
        if (tryAlg(alg)) ok++;
    return ok/(double)nSim;
}


List<int> tst(int N,int M=1000000){
    prepare(N,M);
    return L;
}