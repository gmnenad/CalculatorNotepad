
// Trivial case when K=M=2 :  bet 9 times $0, then bet all on whichever side dropped more often
pXb(X,N,p)=choose(N,X)*p^X*(1-p)^(N-X)  // probability to get X biased drops out of N
pB_GEQ(N,p)=sum((x)=> pXb(x,N,p), ceiling(N/2),N) // probability that coin with bias 'p' will drop more (or equal) times out of N
pW(p,N)=p*pB_GEQ(N-1,p)+(1-p)*(1-pB_GEQ(N-1,p)) // for given p, chance to win last (Nth) bet if we choose majority drop from N-1 previous bets
pWA(N)=2*integral((p)=>pW(p,10),0.5,1) // chance to win last (Nth) bet if we choose majority drop from N-1 previous bets , for unknown bias

pB_GEQ(9,0.8)
pW(0.8,10)
pWA(10)


// Harder case, when we know which side is biased (but not by how much), and K!=M
// probability to win at least M*V0 in N allowed bets
PSR(V,N,M,p,K)={
    if ((N<=0)|(V<=0)) return 0;
    if (K*V>=M) return p+(1-p)*PSR((K*V-M)/(K-1),N-1,M,p,K); else return p*PSR(K*V,N-1,M,p,K);
}
// probability to win at least M*'initial value' in N allowed bets
// given p=probability that heads drop and K= how much bet multiply on win
PS(M,p,K,N)= PSR(1,N,M,p,K)
// probability for unknown bias p, but we still know that head is biased
PSA(M,K,N)= 2*integral((p)=>PS(M,p,K,N),0.5,1) 

p=80%; N=10; K=2; M=3
PS(M,p,K,N)
PSA(M,K,N)


// Hardest case, when we do NOT know which side is biased, nor by how much, and K!=M
// probability to win at least M*V0 in N remaining bets, if previously we had X difference in heads/tails
PUR(V,N,Xi,M,p,K)={
    if (V>=M) return 1;
    if ((N<=0)|(V<=0)) return 0;
    X=abs(Xi); // in case X=-1, it is still difference by 1
    // if no skipping, find probability
    pB= 1/(1+(1/p-1)^X);  // probability to select better (biased) side
    pw=p*pB+(1-p)*(1-pB); // probability to win this bet=prob more freq side to drop again
    if (K*V>=M) 
        res0= pw+(1-pw)*PUR((K*V-M)/(K-1),N-1,X-1,M,p,K); 
    else 
        res0= pw*PUR(K*V,N-1,X+1,M,p,K);
    // probability if we skip ONE bet !!!! - how would we know, if we do not know actual p !?!? This need to use PUAX... 
    res1=pw*PUR(V,N-1,X+1,M,p,K)+(1-pw)*PUR(V,N-1,X-1,M,p,K);
    // return whichever is better, skipping or betting now
    return max(res0,res1);
}
// probability to win at least M*'initial value' in N allowed bets
// given p=probability that heads drop and K= how much bet multiply on win
PU(M,p,K,N)= PUR(1,N,0,M,p,K)
// probability for unknown bias p, but we still know that head is biased
PUA(M,K,N)= 2*integral((p)=>PU(M,p,K,N),0.5,1,1000) 

PU(M,p,K,N)
PUA(M,K,N)











//#C#
// Hardest case, when we do NOT know which side is biased, nor by how much, and K!=M
// probability to win at least M*V0 in N remaining bets, if previously we had X difference in heads/tails
double CPUR(double V,int N,int X,double M,double p,double K){
    if (V>=M) return 1;
    if ((N<=0)||(V<=0)) return 0;
    X=Math.Abs(X); // if X=-1, it is still difference by 1
    //if ((X==0)&&(V*Math.Pow(K,N-1)>=M)) return CPUR(V,N-1,1,M,p,K); // if even, and we can skip one, skip it
    //if ((X==0)) return CPUR(V,N-1,1,M,p,K); // if even, and we can skip one, skip it
    double pB= 1/(1+Math.Pow(1/p-1,X));  // probability to select better (biased) side
    double pw=p*pB+(1-p)*(1-pB); // probability to win this bet
    if (K*V>=M) 
        return pw+(1-pw)*CPUR((K*V-M)/(K-1),N-1,X-1,M,p,K); 
    else 
        return pw*CPUR(K*V,N-1,X+1,M,p,K);
}

double CPU(double M,double p,double K,int N){ 
    return CPUR(1,N-1,1,M,p,K);
}