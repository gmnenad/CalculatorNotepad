//********************************************************************************************************
//** Calculator Notepad 
//** panels: Notepad (center), Results(left), C#code(optional right), Error/Dbg(optional lower right) 
//**    - simple use of math functions, variables and user defined functions 
//**    - support using of units ('kg','in'..), their conversion and user defined units
//**    - support vectors and many functions working on vectors (vec,vDim,vFunc,vSum...)
//**    - provide random generating functions for simulations ( random, rndChoose/Weighted ...)  
//**    - allows easy definition of new user functions in single line
//**        - notepad user functions can be recursive (notepad does auto cache optimization) and multiline {}
//**    - allow definition of C# user functions (in right C# panel, enabled by 2nd toolbar icon )
//**        - instantly usable in notepad, allow for complex/faster functions
//**    - Syntax Highlighting of both Notepad and C# panels
//**        - matching parentheses are highlighted, use Ctrl-Arrows to jump between them
//**    - Autocomplete for Notepad and C# panels
//**        - Notepad autocomplete also show help/descriptions for builtin functions
//**        - Ctrl-Space to show all, or automaticaly shown after first characters
//**    - Menu (leftmost toolbar icon) allows Load,Save and Options settings
//**        - Preset file allow permanent user defined functions and constants
//********************************************************************************************************

   f(x)= 3*x      // simple definition of user functions, without types (int,double...) or blocks {} overhead
   z= 2+f(5)      // equally simple definition of user variables, and using of previously defined functions

//** EXAMPLES  
123 / 4    //  press ENTER after 123/4 to calculate 
last*5     //  type *5 : using */+-^ etc on empty line append last result 
// Built-in functions ( c# Math f-ons, vector f-ons, random f-ons ...), constants (pi,e)
5!+3 * sin(pi / 2) - e ^ 2
5.5!    // float factorial, using Gamma function
vv = vDim(5, (i) => i ^ 2)  // create vector with 5 elemenets, using lambda function
vv[2..4] ∩ vec(3, 4, 4, 9, 10)  // intersection of two vectors, vv[2]==4, vv[2..4]==vec(4,9,16)
if (2 / 3 < 1, 33, 44)    //  if (2/3<1) then 33 else 44 
integral((x) => sin(x), 0, 0.7) // numerical integration (approximate) 
// Units (length,time,weight units, deg/rad etc)
100'kmh->mph'  // converts to desired units, '->' or '>' 
22'lb/in^2'    // auto converts to SI units, here 'kg/m^2' , and demonstrate complex units 
sin(90'deg')   // trig functions require radians, use 'deg' to easily convert to radians if needed
// User defined variables, constants and functions
AU = 149.6e6'km'      // user defined variable or constant
1`000`000 'ly' / AU   // using constant, and also using ` (reverse apostrophe) for digit group separation
tmul(L, Va, Vc) = {  /// multiline user f-on. Hover over func name to see custom tooltip ( due to triple /// )
                     t= (e ^ (Vc / Va) - 1) ;   // in {} blocks, use semicolon ';' to separate expressions 
                     L / Vc * t                 // in blocks, last expression is result value ( or use return x; )
                  }
tmul(0.1'mi', 0.1'mph', 10'mi/h') / 1'year'     // using user f-on with non-Si units
fib(x) = if (x≤1,x,fib(x - 1) + fib(x - 2))  // fibonacci f-on with recursion. uses autocaching optimization
fib(205)   // using user f-on , demonstrate autocache speedup
fibC(205)  // using C# user function from right panel, or fibS(205) for slow version


//#C#
// ** EXAMPLE of C# User functions ( lang.ver. C#10 )

// fibonacci standard recursive, slow
int fibS(int n) => n<=1? n : fibS(n - 1) + fibS(n - 2);


// fibonacci with cache helper, much faster 
// autocomplete nm. class (notebook math) for 
// custom math, rnd and other useful f-ons
double fibC(int n)
{
    if (nmCache.Try("fibC", n)) return nmCache.Result;
    var res= n<=1? n : fibC(n - 1) + fibC(n - 2);
    return nmCache.Add("fibC", n, res); 
}