z=5
a(x)=1+z   // should NOT be constant , sinze z can change later  
graph(a)
b(x)=2+x   // should BE constant if b(5), but NOT be if b(x) used
graph(b)
c(x)=3+3   // should always BE constant
graph(c)
d(x)=if(xâ‰¤1,x,x*d(x-1))    // recursions should NOT be constants
graph(d)

t1(x)= 3+a(4)		// a(4) should NOT be constant (OK)
graph(t1)		
t2(x)= 4+b(x) 	// b(x) should NOT be constant (OK)
graph(t2)
t3(x)= 5+b(5)		// b(5) should BE constant here (OK)
graph(t3)
t4(x)= 6+c(x)		// c(x) should BE constant (OK)
graph(t4)
t5(x)= 7+d(3)		// d(3) will NOT be constant, to prevent loops (OK)
graph(t5)

f(x)=2*x		// test mutability and func redefinition
g(x)=1+f(1)  
graph(g)		// should be CONST if func redef not allowed
g(1)		// a(1)== 3 here
f(x)=4*x	// redefine func - can invalidate const aggregation !
g(1)       	// a(1)== 5 here if redefined