// roll dice to return integer 1..D, but modify average by fraction f ( f=100% is normal )
// - this has nearly-uniform distribution, with 1..avg having same probabilities p1, and avg..D also same but p2
// - in such a way that average value of rolls is standard average (D+1)/2 multiplied by "fraction"
// - return probability to roll 1 as second element
diceRoll(D,f)={
    avg=max(1,min(f*(D+1)/2,D)); // desired average value of rolls
    A=floor(avg); // last value in lower group
    p=1-(2*avg-A-1)/D; // prob to use lower group 1..A
    return vec(if ( rnd<p , floor(rnd*A+1), floor(rnd*(D-A)+A+1) ),p/A);  // random 1..A ( w/prob 'p') otherwise A+1..D  
}



// is it crit, hit or miss and returns: vec(isCrit, isHit, fraction)
// - where "fraction" is part of hit damage to remain (100% normally, or less if we reduced misses)
AttackRoll(mm)={
   // chunk of code that consider player attributes ( values here are just an example):
        atkBonus= 2+4; // Bonus on attack roll ( +2 proficiencies, +4 STR/DEX, +1 weapon, -5 GWM )
        Advantages = 0; Disadvantages = 0; // number of Advantages/Disadvantages
        AC = 14; // enemy target AC 
        maxMiss=mm; // maximal allowed miss chance, if "REDUCE" option is selected ; 0% otherwise
   // actual calculation
   Target = max(2,min(20,AC-atkBonus)); // target to roll is AC reduced by bonus, but it can not be over 20 or under 2
   d= rndNumber(20)+1;
   if ((Advantages>0) & (Disadvantages==0)) d= max( d, rndNumber(20)+1 );  // if advantage, use better of two rolls
   if ((Advantages==0) & (Disadvantages>0)) d= min( d, rndNumber(20)+1 );  // if disadvantage, use worse of two rolls
   if (d==20) return vec(true, true, 1.00); // critical hit
   if (d==1) return vec(true, false, 1.00); // critical miss
   TM= if( maxMiss>0, floor(maxMiss/5%+1.01), 20); // maximal allowed target if misses are limited
   isHit=    d  >= min(Target,TM) ; // hit if we are above target ( or above minimal target if reduced misses)
   fraction= if (TM<Target, (20-Target)/(20-TM),1.00 ); // if we reduced misses, we need to reduce avg damage by this
   return vec(false, isHit, fraction ) ;
}


// returns: vec(isCrit, isHit, damage)
DamageRoll(mm)= {
   // chunk of code to determine attributes ( values here are just an example)
        D=12;  // D=12 or 6 or 4 ... how many sided dice this weapon uses
        Rolls=1;  // Rolls= 1 or 2 ... is this single roll like 1d12, 1d10, 1d4 or double like 2d6
        GWF=false; // are special attributes active (like GWF) that trigger on specific roll value
        dmgBonus=5; // Bonus = weapon enchants, player proficiencies and ability modifiers, GWM +10 etc... 
   // actual calculation
   ar = AttackRoll(mm);
   isCrit=ar[0]; isHit=ar[1]; f=ar[2]; 
   damage=0;
   if (isHit){ 
      diceF=f-(ceiling(f*dmgBonus)-f*dmgBonus)*2/Rolls/(D+1); // fraction of one dice roll from entire damage fraction
      for (i=1, i<=Rolls, i=i+1) {
            dp= diceRoll(D,diceF);
            d=dp[0]; p=dp[1];
            if (GWF & (d<=2) & (rnd<1/D/p)) d=diceRoll(D,diceF)[0]; // repeat roll in case of GWF
            damage = damage+d;
      }
      damage=damage+ ceiling(f*dmgBonus);
      if (isCrit) damage= 2*damage;
   }
   return vec(isCrit, isHit, damage);
}

tst(maxMiss,N)={
    s=0; nHits=0; nMiss=0; nCrit=0; nWeird=0;
    for(i=0, i<N, i=i+1){
        dr= DamageRoll(maxMiss);
        s=s+dr[2];
        if (dr[1]==false) nMiss=nMiss+1;
        if (dr[0] & dr[1]) nCrit=nCrit+1;
    }
    return vec(s/N, nMiss/N, nCrit/N);
}

mm=15%  
tst(mm,40000)                      
AttackRoll(mm) 
DamageRoll(mm)

DiceRoll(12,0.75)





